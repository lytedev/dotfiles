#!/usr/bin/env sh

SPLIT="$SPLIT"
TERMINAL="$TERMINAL"
USE_SCOPE="${USE_SCOPE:-0}"
IN_KITTY=0
[ -n "$KITTY_WINDOW_ID" ] && kitty @ ls --no-response >/dev/null 2>&1 && IN_KITTY=1

if [ -e "${TMUX%%,*}" ] && tmux -V | grep -q '[ -][3456789]\.'; then
	TERMINAL=tmux
elif [ "$IN_KITTY" == 1 ]; then
	TERMINAL=kitty
else
	TERMINAL="${TERMINAL:-xterm}"
fi

if [ -z "$SPLIT" ] && [ $(($(tput lines) * 2)) -gt "$(tput cols)" ]; then
	SPLIT='h'
elif [ "$SPLIT" != 'h' ]; then
	SPLIT='v'
fi

exists() {
	which "$1" >/dev/null 2>&1
}

fifo_pager() {
	cmd="$1"; shift
	tmpfifopath="${TMPDIR:-/tmp}/nnn-preview-tui-fifo.$$"
	mkfifo "$tmpfifopath" || return
	$PAGER < "$tmpfifopath" &
	(
		exec > "$tmpfifopath"
		"$cmd" "$@" &
	)
	rm "$tmpfifopath"
}

print_bin_info() {
	printf -- "-------- \033[1;31mBinary file\033[0m --------\n"
	if exists mediainfo; then
		mediainfo "$1" 2>/dev/null
	else
		file -b "$1"
		# TODO: hexyl?
	fi
}

preview_file () {
	kill %- %+ 2>/dev/null && wait %- %+ 2>/dev/null
	clear

	# Trying to use pistol if it's available.
	# if [ "$USE_PISTOL" -ne 0 ] && exists pistol; then
	# 	fifo_pager pistol "$1"
	# 	return
	# fi

	# Detecting the exact type of the file: the encoding, mime type, and
	# extension in lowercase.
	encoding="$(file -Lb --mime-encoding -- "$1")"
	mimetype="$(file -Lb --mime-type -- "$1")"
	ext="${1##*.}"
	if [ -n "$ext" ]; then
		ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
	fi
	lines=$(($(tput lines)-1))
	cols=$(tput cols)

	# Otherwise, falling back to the defaults.
	if [ -d "$1" ]; then
		cd "$1" || return
		if exists exa; then
			fifo_pager exa --tree --level 3 --colour=always 2>/dev/null
		elif exists tree; then
			fifo_pager tree -L 3 -F
		else
			fifo_pager ls --color=always
		fi
	elif [ "$encoding" = "binary" ]; then
		if [ "${mimetype%%/*}" = "image" ] ; then
			if [ "$IN_KITTY" = "1" ]; then
				# Kitty terminal users can use the native image preview method.
				kitty +kitten icat --silent --transfer-mode=stream --stdin=no "$1" &
			elif exists catimg; then
				catimg "$1"
			elif exists viu; then
				viu -t "$1"
			else
				fifo_pager print_bin_info "$1"
			fi
		elif [ "$mimetype" = "application/zip" ] ; then
			fifo_pager unzip -l "$1"
		elif [ "$ext" = "gz" ] || [ "$ext" = "bz2" ] ; then
			fifo_pager tar -tvf "$1"
		else
			fifo_pager print_bin_info "$1"
		fi
	elif [ "$mimetype" = "text/troff" ] ; then
		fifo_pager man -Pcat -l "$1"
	else
		if exists bat; then
			fifo_pager bat --terminal-width="$cols" --paging=never --decorations=always --color=always \
				"$1" 2>/dev/null
		else
			$PAGER "$1" &
		fi
	fi
}

if [ "$PREVIEW_MODE" ] ; then
	if [ ! -r "$NNN_FIFO" ] ; then
		echo "No FIFO available! (\$NNN_FIFO='$NNN_FIFO')" >&2
		read -r
		exit 1
	fi

	preview_file "$1"

	# use cat instead of 'exec <' to avoid issues with dash shell
	# shellcheck disable=SC2002
	cat "$NNN_FIFO" | \
		while read -r selection ; do
			preview_file "$selection"
		done

	# TODO: detect if file is opened and close preview until back in nnn

	# Restoring the previous layout for kitty users. This will only work for
	# kitty >= 0.18.0.
	if [ "$TERMINAL" = "kitty" ]; then
		kitty @ last-used-layout --no-response >/dev/null 2>&1
	fi

	exit 0
fi

if [ "$TERMINAL" = "tmux" ]; then
	# tmux splits are inverted
	if [ "$SPLIT" = "v" ]; then SPLIT="h"; else SPLIT="v"; fi
	tmux split-window -e "NNN_FIFO=$NNN_FIFO" -e "PREVIEW_MODE=1" -d"$SPLIT" "$0" "$1"
elif [ "$TERMINAL" = "kitty" ]; then
	# Setting the layout for the new window. It will be restored after the
	# script ends.
	kitty @ goto-layout splits >/dev/null

	# Trying to use kitty's integrated window management as the split window.
	# All environmental variables that will be used in the new window must
	# be explicitly passed.
	kitty @ launch --no-response --title "nnn preview" --keep-focus \
		--cwd "$PWD" --env "PATH=$PATH" --env "NNN_FIFO=$NNN_FIFO" \
		--env "PREVIEW_MODE=1" --env "PAGER=$PAGER" \
		--env "USE_SCOPE=$USE_SCOPE" --env "SPLIT=$SPLIT" \
		--env "USE_PISTOL=$USE_PISTOL" \
		--location "${SPLIT}split" "$0" "$1" >/dev/null
else
	PREVIEW_MODE=1 $TERMINAL -e "$0" "$1" &
fi
